import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.types import LabeledPrice, PreCheckoutQuery, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters.command import Command
from aiogram.filters import command
from aiogram.filters.command import CommandObject
from aiogram import F
from aiogram.types import FSInputFile 
import requests
import aiosqlite
import re
import random
import time
import aiohttp
import logging
import sqlite3



TOKEN = "7812877820:AAHwGo92qc6Ji2YaloQB80AX9cvnwuMA7A8"

BOT_LINK = 'https://t.me/wallistarsbot'
API_KEY = "0003448041858122acc42b042ab2a14c7a0a880f488435620adcc6db96f6cf13"


bot = Bot(TOKEN)
dp = Dispatcher()

user_id = 0
chat_id = ''
referrer_id = 0


async def init_db():
    global user_id
    
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                stars INTEGER DEFAULT 0,
                referrals INTEGER DEFAULT 0,
                tasks_completed INTEGER DEFAULT 0,
                referrer INTEGER,
                last_reward_time INTEGER DEFAULT 0
            )
        """)
        
        await db.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü referrer
        await cursor.execute("PRAGMA table_info(users)")
        columns = await cursor.fetchall()
        column_names = [column[1] for column in columns]

        # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ referrer –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if 'referrer' not in column_names:
            await cursor.execute("ALTER TABLE users ADD COLUMN referrer INTEGER")
            await db.commit()


@dp.message(CommandStart())
async def start(message: types.Message):
    global chat_id
    global user_id
    global referrer_id
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    args = message.text.split()
    if len(args) == 1:
        referrer_id = None
    else:
        referrer_id = args[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞


    
    await request_op(user_id, chat_id)
    
async def start_two(message: types.Message):

    #btn1 = InlineKeyboardButton(text='‚ú® –ö–ª–∏–∫–µ—Ä', callback_data='clicker')
    btn2 = InlineKeyboardButton(text='‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='work_stars')
    btn3 = InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    btn4 = InlineKeyboardButton(text='üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data='send_stars')
    btn5 = InlineKeyboardButton(text='üé∞ –†—É–ª–µ—Ç–∫–∞', callback_data='ruletka')
    btn6 = InlineKeyboardButton(text='üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instrykciya')
    btn7 = InlineKeyboardButton(text='üìù –ó–∞–¥–∞–Ω–∏—è', callback_data='quest')
            
    #row_one = [btn1]
    row_two = [btn2]
    row_fre = [btn3, btn4]
    row_fho = [btn5, btn6]
    row_five = [btn7]
    rows = [row_two, row_fre, row_fho, row_five]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
    photo = FSInputFile("Video/Glavnaya.mp4")
    await bot.send_animation(chat_id, photo, caption='1Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É ‚Äî –∂–º–∏ ¬´‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 3‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n<blockquote>‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–ü—Ä–æ—Ñ–∏–ª—å)\n‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n‚Äî –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π –±–∞–ª–∞–Ω—Å!\n‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø</blockquote>\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup, parse_mode='html')
            
 
@dp.callback_query(F.data == 'clicker')
async def calldata(call: CallbackQuery):
    pass
    
    
@dp.callback_query(F.data == 'profile')
async def calldata(call: CallbackQuery):
    await call.message.delete()
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()

    if user_data:
        
        btn1 = InlineKeyboardButton(text='üí≥ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data='promo')
        btn2 = InlineKeyboardButton(text='üí´ –ó–≤—ë–∑–¥—ã –¥—Ä—É–≥—É', callback_data='stars_friend')
        btn3 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
        
        row_one = [btn1, btn2]
        row_two = [btn3]
        rows = [row_one, row_two]
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        
        stars, referrals, tasks_completed = user_data
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        photo = FSInputFile("Video/Profile.mp4")
        await bot.send_animation(call.from_user.id, photo, caption=f"‚ú® <b>–ü—Ä–æ—Ñ–∏–ª—å\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ –ò–º—è: {call.from_user.username}\nüÜî ID: {call.from_user.id}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\nüë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {referrals}\nüí∞ –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n\n<i>‚¨áÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–∞</i>", parse_mode='html', reply_markup=markup)

    else:
        await bot.send_message(call.from_user.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    

@dp.callback_query(F.data == 'promo')
async def calldata(call: CallbackQuery):
    
    await bot.send_message(call.from_user.id, '–ë–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –ø–µ—Ä–≤—ã–º.')  

@dp.callback_query(F.data == 'stars_friend')
async def calldata(call: CallbackQuery):
    
    await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥ —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –¥—Ä—É–≥—É!\n- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 50üåü')  

@dp.callback_query(F.data == 'send_stars')
async def calldata(call: CallbackQuery):
    await call.message.delete()
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
    
    stars, referrals, tasks_completed = user_data
    
    btn1 = InlineKeyboardButton(text='15 ‚≠ê (üß∏)', callback_data='send_bear')
    btn2 = InlineKeyboardButton(text='15 ‚≠ê (üíù)', callback_data='send_heart')
    btn3 = InlineKeyboardButton(text='25 ‚≠ê (üåπ)', callback_data='send_rose')
    btn4 = InlineKeyboardButton(text='25 ‚≠ê (üéÅ)', callback_data='send_gift')
    btn5 = InlineKeyboardButton(text='50 ‚≠ê (üçæ)', callback_data='send_champagne')
    btn6 = InlineKeyboardButton(text='50 ‚≠ê (üíê)', callback_data='send_flowers')
    btn7 = InlineKeyboardButton(text='50 ‚≠ê (üöÄ)', callback_data='send_rocket')
    btn8 = InlineKeyboardButton(text='50 ‚≠ê (üéÇ)', callback_data='send_cake')
    btn9 = InlineKeyboardButton(text='100 ‚≠ê (üèÜ)', callback_data='send_cup')
    btn10 = InlineKeyboardButton(text='100 ‚≠ê (üíç)', callback_data='send_ring')
    btn11 = InlineKeyboardButton(text='100 ‚≠ê (üíé)', callback_data='send_diamond')
    btn12 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
    
    
    row_one = [btn1, btn2]
    row_two = [btn3, btn4]
    row_fre = [btn5, btn6]
    row_fho = [btn7, btn8]
    row_five = [btn9, btn10]
    row_six = [btn11]
    row_seven = [btn12]
    rows = [row_one, row_two, row_fre, row_fho, row_five, row_six, row_seven]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)

    photo = FSInputFile("Photo/Vivod.png")
    await bot.send_photo(call.from_user.id, photo, caption=f'üí∞<b>–ë–∞–ª–∞–Ω—Å:</b> {stars} ‚≠êÔ∏è\n\n<b>‚ÄºÔ∏è–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:</b>\n‚Äî –º–∏–Ω–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞\n‚Äî –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n\n<blockquote>‚úÖ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥!</blockquote>\n\n<b>–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å:</b>', parse_mode='html', reply_markup=markup)  
    

@dp.callback_query(F.data == 'send_bear')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 15:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 15 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 15‚≠êÔ∏è (üß∏)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')

@dp.callback_query(F.data == 'send_heart')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 15:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 15 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 15‚≠êÔ∏è (üíù)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')

@dp.callback_query(F.data == 'send_rose')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 25:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 25 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 25‚≠êÔ∏è (üåπ)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')
        
@dp.callback_query(F.data == 'send_gift')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 25:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 25 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 25‚≠êÔ∏è (üéÅ)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')

@dp.callback_query(F.data == 'send_champagne')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 50:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 50 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 50‚≠êÔ∏è (üçæ)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')


@dp.callback_query(F.data == 'send_flowers')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 50:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 50 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 50‚≠êÔ∏è (üíê)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')
        

@dp.callback_query(F.data == 'send_rocket')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 50:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 50 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 50‚≠êÔ∏è (üöÄ)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')
        
@dp.callback_query(F.data == 'send_cake')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 50:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 50 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 50‚≠êÔ∏è (üéÇ)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')
        
@dp.callback_query(F.data == 'send_cup')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 100:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 100 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 100‚≠êÔ∏è (üèÜ)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')
        
@dp.callback_query(F.data == 'send_ring')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 100:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 100 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 100‚≠êÔ∏è (üíç)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')
        
@dp.callback_query(F.data == 'send_diamond')
async def calldata(call: CallbackQuery):
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 100:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE users SET stars = stars - 100 WHERE user_id = ?", (user_id,))
            await db.commit()
            
            user_name = call.from_user.username
            
            btn1 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=f'https://t.me/{user_name}')
            row_one = [btn1]
            rows = [row_one]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await bot.send_message(chat_id=5890667637, text=f'‚ùó<b> –ù–û–í–´–ô –í–´–í–û–î </b>‚ùó\n\n<b>------------------------------</b>\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\nüÜî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\nüí∏ <b>–í—ã–≤–æ–¥</b> 100‚≠êÔ∏è (üíé)\n<b>-------------------------- ----</b>', parse_mode='html', reply_markup=markup)
            await bot.send_message(call.from_user.id, '‚úì –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ!')
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥!')


@dp.callback_query(F.data == 'instrykciya')
async def calldata(call: CallbackQuery):
    await call.message.delete()
    
    btn1 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
    row_one = [btn1]
    rows = [row_one]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    
    photo = FSInputFile("Photo/Instrykcia.png")
    await bot.send_photo(call.from_user.id, photo, caption='<b>üìå –ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ?</b>\n<blockquote>‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üßç‚Äç‚ôÇÔ∏èüßç‚Äç‚ôÄÔ∏è\n‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≤ —Å–≤–æ–µ–º –¢–ì –∏–ª–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ üì£\n‚Ä¢ –û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö üó®Ô∏è\n‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö üåç</blockquote>\n\n<b>ü§© –°–ø–æ—Å–æ–±—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ 1000 –∑–≤—ë–∑–¥ –≤ –¥–µ–Ω—å:</b>\n\n<b>1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:</b>\n<blockquote>1. –ó–∞—Ö–æ–¥–∏–º –≤ TikTok –∏–ª–∏ –õ–∞–π–∫\n2. –ò—â–µ–º –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º: –∑–≤—ë–∑–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º, –ø–æ–¥–∞—Ä–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–≥ —Å—Ç–∞—Ä—Å—ã –∏ —Ç.–ø.\n3. –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞: –î–∞—Ä—é –ø–æ–¥–∞—Ä–∫–∏/–∑–≤–µ–∑–¥—ã, –ø–∏—à–∏—Ç–µ –≤ —Ç–≥ @–≤–∞—à—é–∑–µ—Ä\n4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É —Ç–µ–º, –∫—Ç–æ –ø–∏—à–µ—Ç\n5. –ñ–¥—ë–º –∏ –≤—ã–≤–æ–¥–∏–º –∑–≤–µ–∑–¥—ã üí∞</blockquote>\n\n<b>2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±:</b>\n<blockquote>1. –ó–∞—Ö–æ–¥–∏–º –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ @leomatchbot\n2. –î–µ–ª–∞–µ–º –∞–Ω–∫–µ—Ç—É –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞\n3. –õ–∞–π–∫–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ä—è–¥ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∂–¥—ë–º –ø–æ–∫–∞ –Ω–∞—Å –ø—Ä–æ–ª–∞–π–∫–∞—é—Ç üíû\n4. –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å–æ –≤—Å–µ–º–∏ –≤ –õ–° –∏ –ø–∏—à–µ–º: –ü—Ä–∏–≤–µ—Ç, –ø–æ–º–æ–≥–∏ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã. –ü–µ—Ä–µ–π–¥–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –±–æ—Ç–∞ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: ¬´—Ç–≤–æ—è —Å—Å—ã–ª–∫–∞¬ª\n5. –ñ–¥—ë–º –∏ –≤—ã–≤–æ–¥–∏–º –∑–≤—ë–∑–¥—ã üåü</blockquote>', parse_mode='html', reply_markup=markup)


@dp.callback_query(F.data == 'ruletka')
async def calldata(call: CallbackQuery):
    await call.message.delete()
    
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
    
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    
    btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
    btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
    btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
    btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
    btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
    btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
    btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
    btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
    btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
    btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
    
    row_one = [btn1, btn2, btn3]
    row_two = [btn4, btn5, btn6]
    row_fre = [btn7, btn8, btn9]
    row_fho = [btn10]
    rows = [row_one, row_two, row_fre, row_fho]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    
    
    photo = FSInputFile("Photo/Ruletka.png")
    await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)


@dp.callback_query(F.data == '0.5‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 0.5:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0.5‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 0.5 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 1 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')
    

@dp.callback_query(F.data == '1‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 1:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 1‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 1 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 2 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')


@dp.callback_query(F.data == '2‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 2:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 2‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 2 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 4‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 4 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')


@dp.callback_query(F.data == '3‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 3:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 3‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 3 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 6‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 6 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')



@dp.callback_query(F.data == '5‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 5:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 5‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 5 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 10‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 10 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')

@dp.callback_query(F.data == '10‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 10:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 10 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 20‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 20 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')


@dp.callback_query(F.data == '50‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 50:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 50‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 50 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 100 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')


@dp.callback_query(F.data == '100‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 100:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 100‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 100 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 200‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 200 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')

@dp.callback_query(F.data == '500‚≠ê')
async def calldata(call: CallbackQuery):
    
    res = random.randint(0,1)
    user_id = call.from_user.id
    db = await aiosqlite.connect('users.db')
        
    async with db.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
        user_data = await cursor.fetchone()
        
    stars, referrals, tasks_completed = user_data
    
    if int(stars) >= 500:
        if res == 0:
            await bot.answer_callback_query(call.id, text='–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 500‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars - 500 WHERE user_id = ?", (user_id,))
                await db.commit()
            
            await call.message.delete()

            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
                
            
        else:
            await bot.answer_callback_query(call.id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1000‚≠ê')
            
            async with db.cursor() as cursor:
                await cursor.execute("UPDATE users SET stars = stars + 1000 WHERE user_id = ?", (user_id,))
                await db.commit()
                
            await call.message.delete()
                
            user_id = call.from_user.id
            db = await aiosqlite.connect('users.db')
            
            async with db.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute("SELECT stars, referrals, tasks_completed FROM users WHERE user_id = ?", (user_id,))
                user_data = await cursor.fetchone()
                
            stars, referrals, tasks_completed = user_data
            
            
            btn1 = InlineKeyboardButton(text='0.5‚≠ê', callback_data='0.5‚≠ê')
            btn2 = InlineKeyboardButton(text='1‚≠ê', callback_data='1‚≠ê')
            btn3 = InlineKeyboardButton(text='2‚≠ê', callback_data='2‚≠ê')
            btn4 = InlineKeyboardButton(text='3‚≠ê', callback_data='3‚≠ê')
            btn5 = InlineKeyboardButton(text='5‚≠ê', callback_data='5‚≠ê')
            btn6 = InlineKeyboardButton(text='10‚≠ê', callback_data='10‚≠ê')
            btn7 = InlineKeyboardButton(text='50‚≠ê', callback_data='50‚≠ê')
            btn8 = InlineKeyboardButton(text='100‚≠ê', callback_data='100‚≠ê')
            btn9 = InlineKeyboardButton(text='500‚≠ê', callback_data='500‚≠ê')
            btn10 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
            
            row_one = [btn1, btn2, btn3]
            row_two = [btn4, btn5, btn6]
            row_fre = [btn7, btn8, btn9]
            row_fho = [btn10]
            rows = [row_one, row_two, row_fre, row_fho]
            markup = InlineKeyboardMarkup(inline_keyboard=rows)
            
            
            photo = FSInputFile("Photo/Ruletka.png")
            await bot.send_photo(call.from_user.id, photo,  caption=f'<u>üé∞ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å !</u>\n\nüí∞<b> –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>', parse_mode='html', reply_markup=markup)
    else:
        await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥')


@dp.callback_query(F.data == 'quest')
async def calldata(call: CallbackQuery):
    
    await bot.send_message(call.from_user.id, '–°–µ–π—á–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!')
    
    
@dp.callback_query(F.data == 'work_stars')
async def calldata(call: CallbackQuery):
    await call.message.delete()
    user_id = call.from_user.id
    referral_link = f"{BOT_LINK}?start={user_id}"  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    
    btn1 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='exit')
    row_one = [btn1]
    rows = [row_one]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    
    photo = FSInputFile("Photo/Zarabotat.png")
    await bot.send_photo(call.from_user.id, photo, caption=f"*üéâ–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –ø–æ 3 ‚≠êÔ∏è –æ—Ç –ü–∞—Ç—Ä–∏–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!*\n\nüîó _–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–Ω–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):_\n\n`{referral_link}`\n\n*üöÄ –ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ?*\n_‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üë•\n‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Å–≤–æ–µ–º –¢–ì –∏–ª–∏ –≤ —Å–≤–æ–µ–º Telegram –∫–∞–Ω–∞–ª–µ üì±\n‚Ä¢ –û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö üó®\n‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö üåç_", parse_mode='MARKDOWN', reply_markup=markup)
    
    

@dp.callback_query(F.data == 'exit')
async def calldata(call: CallbackQuery):
    await call.message.delete()
    
    #btn1 = InlineKeyboardButton(text='‚ú® –ö–ª–∏–∫–µ—Ä', callback_data='clicker')
    btn2 = InlineKeyboardButton(text='‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='work_stars')
    btn3 = InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    btn4 = InlineKeyboardButton(text='üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data='send_stars')
    btn5 = InlineKeyboardButton(text='üé∞ –†—É–ª–µ—Ç–∫–∞', callback_data='ruletka')
    btn6 = InlineKeyboardButton(text='üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instrykciya')
    btn7 = InlineKeyboardButton(text='üìù –ó–∞–¥–∞–Ω–∏—è', callback_data='quest')
    
    #row_one = [btn1]
    row_two = [btn2]
    row_fre = [btn3, btn4]
    row_fho = [btn5, btn6]
    row_five = [btn7]
    rows = [row_two, row_fre, row_fho, row_five]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    
    photo = FSInputFile("Video/Glavnaya.mp4")
    await bot.send_animation(call.from_user.id, photo, caption='1Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É ‚Äî –∂–º–∏ ¬´‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 3‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n<blockquote>‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–ü—Ä–æ—Ñ–∏–ª—å)\n‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n‚Äî –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π –±–∞–ª–∞–Ω—Å!\n‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø</blockquote>\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup, parse_mode='html')
    
    
    
    
@dp.callback_query(F.data == 'cheak_subscribe')
async def calldata(call: CallbackQuery):
    
    pass

    
    
async def request_op(user_id, chat_id, gender=None):
    try:
        headers = {
            'Content-Type': 'application/json',
            'Auth': '0003448041858122acc42b042ab2a14c7a0a880f488435620adcc6db96f6cf13',
            'Accept': 'application/json',
        }
        data = {
            'UserId': user_id, 
            'ChatId': chat_id
        }
        if gender:
            data['Gender'] = gender

        async with aiohttp.ClientSession() as session:
            async with session.post('https://api.subgram.ru/request-op/', headers=headers, json=data) as response:
                if not response.ok:
                    logging.error('SubGram: %s' % str(await response.json()))
                    return 'ok', 400
                response_json = await response.json()
                
                if response_json['message'] == '–£—Å–ø–µ—à–Ω–æ':
                    db = await aiosqlite.connect('users.db')
    
                    async with db.cursor() as cursor:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        await cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
                        user_data = await cursor.fetchone()
                    
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        if not user_data:
                            await cursor.execute("INSERT INTO users (user_id, referrer) VALUES (?, ?)", (user_id, referrer_id or None))
                            await db.commit()

                            # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
                            if referrer_id:
                                referrer_id = int(referrer_id)
                                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                                await cursor.execute("UPDATE users SET referrals = referrals + 1 WHERE user_id = ?", (referrer_id,))
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                                stars_reward = 3 #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                                await cursor.execute("UPDATE users SET stars = stars + ? WHERE user_id = ?", (stars_reward, referrer_id))
                                await db.commit()
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥
                                await bot.send_message(referrer_id, text=f" –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars_reward} ‚≠ê –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!")
                    
                    #btn1 = InlineKeyboardButton(text='‚ú® –ö–ª–∏–∫–µ—Ä', callback_data='clicker')
                    btn2 = InlineKeyboardButton(text='‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='work_stars')
                    btn3 = InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                    btn4 = InlineKeyboardButton(text='üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data='send_stars')
                    btn5 = InlineKeyboardButton(text='üé∞ –†—É–ª–µ—Ç–∫–∞', callback_data='ruletka')
                    btn6 = InlineKeyboardButton(text='üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instrykciya')
                    btn7 = InlineKeyboardButton(text='üìù –ó–∞–¥–∞–Ω–∏—è', callback_data='quest')
                    
                    #row_one = [btn1]
                    row_two = [btn2]
                    row_fre = [btn3, btn4]
                    row_fho = [btn5, btn6]
                    row_five = [btn7]
                    rows = [row_two, row_fre, row_fho, row_five]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    
                    photo = FSInputFile("Video/Glavnaya.mp4")
                    await bot.send_animation(chat_id, photo, caption='1Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É ‚Äî –∂–º–∏ ¬´‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 3‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n<blockquote>‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–ü—Ä–æ—Ñ–∏–ª—å)\n‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n‚Äî –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π –±–∞–ª–∞–Ω—Å!\n‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø</blockquote>\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup, parse_mode='html')
                    
                    return response_json.get("status"), response_json.get("code")
                else:
                    return response_json.get("status"), response_json.get("code")

    except Exception as e:
        logging.error('SubGram: %s' % str(e))
        return 'ok', 400  
    
@dp.callback_query(lambda call: call.data.startswith("subgram"))
async def subgram_callback_query(call):
    global referrer_id
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if call.data == "subgram-op":
        status, code = await request_op(user_id, chat_id)
        if status == 'ok' and code == 200: #–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å ok –∏ code 200 (—Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω)
            pass
            
        elif status == 'ok':
            pass
            
        else:
            return
        
    elif call.data.startswith("subgram_gender_"):
        gender = call.data.split("_")[2]
        status, code = await request_op(user_id, chat_id, gender)
        if status == 'ok' and code == 200: #–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å ok –∏ code 200 (—Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω)
            pass
        
        elif status == 'ok':
            pass
        
        else:
            return
    
    
async def main() -> None:
    await dp.start_polling(bot)
    
asyncio.run(main())
